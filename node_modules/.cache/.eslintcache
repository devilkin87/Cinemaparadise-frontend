[{"/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/index.js":"1","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/App.js":"2","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reportWebVitals.js":"3","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/store/store.js":"4","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/Router.jsx":"5","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/movies/reducers.js":"6","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/posts/reducers.js":"7","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/watchlists/reducers.js":"8","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/components/common/Footer.jsx":"9","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/store/initialState.js":"10","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/movies/actions.js":"11","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/posts/actions.js":"12","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/watchlists/action.js":"13","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/components/common/Preview.jsx":"14","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/containers/Watchlist.jsx":"15","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/containers/Home.jsx":"16","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/containers/Categories.jsx":"17","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/API.js":"18","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/watchlists/selectors.js":"19","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/watchlists/operations.js":"20","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/movies/operations.js":"21","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/movies/selectors.js":"22","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/components/common/Header.jsx":"23"},{"size":815,"mtime":1662955443000,"results":"24","hashOfConfig":"25"},{"size":242,"mtime":1662955443000,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1662955443000,"results":"27","hashOfConfig":"25"},{"size":856,"mtime":1662955443000,"results":"28","hashOfConfig":"25"},{"size":681,"mtime":1662955443000,"results":"29","hashOfConfig":"25"},{"size":391,"mtime":1662955443000,"results":"30","hashOfConfig":"25"},{"size":839,"mtime":1662955443000,"results":"31","hashOfConfig":"25"},{"size":656,"mtime":1662955443000,"results":"32","hashOfConfig":"25"},{"size":923,"mtime":1662955443000,"results":"33","hashOfConfig":"25"},{"size":301,"mtime":1662955443000,"results":"34","hashOfConfig":"25"},{"size":167,"mtime":1662955443000,"results":"35","hashOfConfig":"25"},{"size":471,"mtime":1662955443000,"results":"36","hashOfConfig":"25"},{"size":548,"mtime":1662955443000,"results":"37","hashOfConfig":"25"},{"size":2096,"mtime":1662955443000,"results":"38","hashOfConfig":"25"},{"size":2917,"mtime":1662955443000,"results":"39","hashOfConfig":"25"},{"size":7442,"mtime":1662955443000,"results":"40","hashOfConfig":"25"},{"size":10205,"mtime":1662955443000,"results":"41","hashOfConfig":"25"},{"size":2724,"mtime":1671169373025,"results":"42","hashOfConfig":"25"},{"size":184,"mtime":1662955443000,"results":"43","hashOfConfig":"25"},{"size":1245,"mtime":1662955443000,"results":"44","hashOfConfig":"25"},{"size":472,"mtime":1662955443000,"results":"45","hashOfConfig":"25"},{"size":163,"mtime":1662955443000,"results":"46","hashOfConfig":"25"},{"size":574,"mtime":1662955443000,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"s8wkg2",{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":3,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":4,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/index.js",[],"/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/App.js",[],"/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reportWebVitals.js",[],"/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/store/store.js",[],"/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/Router.jsx",[],"/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/movies/reducers.js",[],"/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/posts/reducers.js",[],"/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/watchlists/reducers.js",[],"/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/components/common/Footer.jsx",[],"/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/store/initialState.js",[],"/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/movies/actions.js",[],"/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/posts/actions.js",[],"/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/watchlists/action.js",[],"/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/components/common/Preview.jsx",["100","101","102","103"],"import React, { useState, useEffect } from 'react';\nimport API from '../../API';\nimport { useDispatch } from 'react-redux';\nimport Rating from \"../../assets/img/Rating.png\";\nimport PlayNow from \"../../assets/img/Playnow.png\";\n\n\nconst api = new API();\n\nconst Preview = ({ setShowPreview, selectedMovieId }) => {\n    const [movie, setMovie] = useState(null);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        api.getMovie(selectedMovieId)\n            .then(movie => {\n                setMovie(movie);\n            })\n            .catch(error => {\n                alert('Faild to connect API: /movie/:id/');\n            });\n    }, []);\n\n    console.log('movie', movie);\n\n    return (\n        <>\n\n            {movie && (\n                <div class=\"active-movie\">\n\n                    <button class=\"close\"><a href=\"/\">x</a></button><div class=\"play-movie\">\n                        <div class=\"movie-img\"><img src={movie.image} alt=\"iceAge\" /></div>\n                        <div class=\"discription\">\n                            <h2>{movie.name}</h2>\n                            <p>Movie</p>\n                            {/* <img src={Rating} alt=\"Rating\" /> */}\n                            <h4>{movie.rating}</h4>\n                            <p>{movie.movie_duration}Minutes-USA</p>\n                            <div class=\"genre\">\n                                <p>Action</p>\n                                <p>Crime</p>\n                                <p>Drama</p>\n                                <p>Fantasy</p>\n                                <p>Thriller</p>\n                            </div>\n\n                            <p id=\"about\">\n                                {movie.description}\n                            </p>\n\n                            <a href={movie.trailer_link} target=\"_blank\"><button class=\"playnow-Btn\">\n                                Play Now<img src={PlayNow} alt=\"Play\" />\n                            </button></a>\n                        </div>\n                    </div>\n                </div>\n            )}\n\n        </>\n    )\n}\n\nexport default Preview\n","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/containers/Watchlist.jsx",["104","105"],"import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { deleteWatchlist, fetchFromLocalStorage } from '../reducks/watchlists/operations';\nimport { getWatchlist } from '../reducks/watchlists/selectors';\nimport IconFav from '../assets/img/Remove.png';\nimport Preview from '../components/common/Preview';\nimport Header from '../components/common/Header';\n\n\nfunction Watchlist() {\n    const dispatch = useDispatch();\n    const selector = useSelector(state => state);\n    const [showPreview, setShowPreview] = useState(false);\n    const [selectedMovieId, setSelectedMovieId] = useState(null);\n    const watchlist = getWatchlist(selector);\n    const clickMovie = movieId => {\n        setSelectedMovieId(movieId);\n        setShowPreview(true);\n    };\n    useEffect(() => {\n        dispatch(fetchFromLocalStorage());\n    });\n    return (\n        <>\n            {showPreview && <Preview setShowPreview={setShowPreview} selectedMovieId={selectedMovieId} />}\n            <Header />\n            <div class=\"container\">\n\n                <div class=\"upcoming\">\n\n                    <h1>My Watchlist</h1>\n\n                </div>\n\n                <div class=\"upcoming-movies\">\n                    {watchlist && watchlist.length > 0 ? (\n                        watchlist.map(watchlist => (\n\n                            <div class=\"card\">\n\n                                <img\n                                    class=\"fav\"\n                                    onClick={() => {\n                                        dispatch(deleteWatchlist(watchlist.id));\n                                    }}\n                                    src={IconFav}\n                                    alt=\"\"\n                                />\n\n                                <div class=\"img-container\">\n                                    <img onClick={() => clickMovie(watchlist.id)}\n                                        src={watchlist.image} />\n                                </div>\n                                <div class=\"info\">\n                                    <h4>{watchlist.name}</h4>\n                                    <p>TV-MA | Action, Crime</p>\n\n                                    <a href={watchlist.trailer_link} target=\"_blank\"><button class=\"trailer-Btn\">\n                                        Watch Trailer\n                                    </button></a>\n                                </div>\n                            </div>\n                        ))\n                    ) : (\n                        <>\n                            <p>No movies here yet...</p>\n                            <p>To add movies to your watchlist click the star on the top right corner of the movie</p>\n                        </>\n                    )}\n\n                </div>\n            </div>\n\n        </>\n    );\n};\n\nexport default Watchlist;\n","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/containers/Home.jsx",["106","107","108","109","110","111","112","113","114","115","116","117","118","119","120"],"import { useDispatch, useSelector } from 'react-redux';\nimport { fetchMovies } from '../reducks/movies/operations';\nimport Header from \"../components/common/Header\";\nimport leftArrow from '../assets/img/LeftArrow.png';\nimport rightArrow from \"../assets/img/RightArrow.png\"\nimport iceAge from \"../assets/img/ice age2.png\"\nimport path from \"../assets/img/Path.png\";\nimport WatchTrailer from \"../assets/img/Watch-Trailer.png\";\nimport React, { useEffect, useState } from 'react';\nimport { getMovies } from '../reducks/movies/selectors';\nimport API from '../API';\nimport { getWatchlist } from '../reducks/watchlists/selectors';\nimport { addWatchlist, fetchFromLocalStorage } from '../reducks/watchlists/operations';\nimport Preview from '../components/common/Preview';\nimport IconFav from '../assets/img/Star1.png';\n\n\nconst api = new API();\nconst Home = () => {\n    const [moviesComingSoon, setMoviesCommingSoon] = useState(null);\n    const [moviesNewReleased, setMoviesNewReleased] = useState(null);\n    const [selectedMovieId, setSelectedMovieId] = useState(null);\n    const [showPreview, setShowPreview] = useState(false);\n    const selector = useSelector(state => state);\n    const dispatch = useDispatch();\n    const movies = getMovies(selector);\n    const watchlist = getWatchlist(selector);\n    const clickfav = movie => {\n        dispatch(addWatchlist(movie));\n    };\n    const clickMovie = movieId => {\n        setSelectedMovieId(movieId);\n        setShowPreview(true);\n    };\n\n    useEffect(() => {\n        dispatch(fetchFromLocalStorage);\n        api.getMovies({ release_type: 'Coming Soon' })\n            .then(movies => {\n                setMoviesCommingSoon(movies);\n            })\n            .catch(error => {\n                alert('Failed to connect API: /movies/');\n            });\n        api.getMovies({ release_type: 'Newly Released' })\n            .then(movies => {\n                setMoviesNewReleased(movies);\n            })\n            .catch(error => {\n                alert('Failed to connect API: /movies/');\n            });\n    }, [movies]);\n\n    return (\n        <>\n            {showPreview && <Preview setShowPreview={setShowPreview} selectedMovieId={selectedMovieId} />}\n            <Header />\n            <div class=\"container\">\n                <div class=\"top\">\n                    <img class=\"path\" src={path} alt=\"path\" />\n                    <img class=\"backgroundImg\" src={iceAge} alt=\"IceAge\" />\n                    <h2>ICE AGE</h2>\n                    <p>\n                        With global warming threatening their once-icy domain with widespread\n                        flooding, Manny (Ray Romano), Sid (John Alberto Leguizamo) and Diego\n                        (Denis Leary) set out to find a safe haven. Along the way, another\n                        mammoth (Queen Latifah), who thinks she is an opossum, joins the\n                        travellers on their perilous quest.\n                    </p>\n                    <button class=\"watch-now-btn\"><a href=\"https://www.youtube.com/watch?v=VUSAwCHuNLo\" target=\"_blank\">Watch Now</a></button>\n                </div>\n\n\n                <div class=\"newly-released\">\n\n\n                    <h1>Newly Released</h1>\n\n                    <div class=\"arrows\">\n                        <img src={leftArrow} />\n                        <img src={rightArrow} />\n                    </div>\n                </div>\n\n                <div class=\"newly-released-movies\">\n                    {moviesNewReleased && moviesNewReleased.results.length > 0 ? (\n                        moviesNewReleased.results.map(movie => (\n\n\n\n                            <div class=\"card\">\n                                {movie &&\n                                    Object.values(watchlist).filter(\n                                        watchlistMovie => movie.id == watchlistMovie.id\n                                    ).length === 0 && (\n                                        <img\n                                            class=\"fav\"\n                                            onClick={() => {\n                                                clickfav(movie);\n                                            }}\n                                            src={IconFav}\n                                            alt=\"\"\n                                        />\n                                    )}\n                                <div class=\"img-container\">\n                                    <img onClick={() => clickMovie(movie.id)}\n                                        src={movie.image} />\n                                </div>\n                                <div class=\"info\">\n                                    <h4>{movie.name}</h4>\n                                    <p>TV-MA | Action, Crime</p>\n\n                                    <a href={movie.trailer_link} target=\"_blank\"><button class=\"trailer-Btn\">\n                                        <img src={WatchTrailer} />\n                                    </button></a>\n                                </div>\n                            </div>\n                        ))\n                    ) : (\n                        <p>No movies here yet...</p>\n                    )}\n\n                </div>\n\n\n\n                <div class=\"upcoming\">\n\n                    <h1>Upcoming</h1>\n\n                    <div class=\"arrows\">\n                        <img src={leftArrow} />\n                        <img src={rightArrow} />\n                    </div>\n                </div>\n\n                <div class=\"upcoming-movies\">\n                    {moviesComingSoon && moviesComingSoon.results.length > 0 ? (\n                        moviesComingSoon.results.map(movie => (\n\n                            <div class=\"card\">\n                                {movie &&\n                                    watchlist &&\n                                    Object.values(watchlist).filter(\n                                        watchlistMovie => movie.id == watchlistMovie.id\n                                    ).length === 0 && (\n                                        <img\n                                            class=\"fav\"\n                                            onClick={() => {\n                                                clickfav(movie);\n                                            }}\n                                            src={IconFav}\n                                            alt=\"heart\"\n                                        />\n                                    )}\n                                <div class=\"img-container\">\n                                    <img onClick={() => clickMovie(movie.id)}\n                                        src={movie.image} />\n                                </div>\n                                <div class=\"info\">\n                                    <h4>{movie.name}</h4>\n                                    <p>TV-MA | Action, Crime</p>\n\n                                    <a href={movie.trailer_link} target=\"_blank\"><button class=\"trailer-Btn\">\n                                        <img src={WatchTrailer} />\n                                    </button></a>\n                                </div>\n                            </div>\n                        ))\n                    ) : (\n                        <p>No movies here yet...</p>\n                    )}\n\n                </div>\n            </div>\n\n        </>\n    );\n};\n\nexport default Home;","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/containers/Categories.jsx",["121","122","123","124","125","126","127","128","129","130","131","132","133","134"],"import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { addWatchlist, fetchFromLocalStorage } from '../reducks/watchlists/operations';\nimport { getWatchlist } from '../reducks/watchlists/selectors';\nimport IconFav from '../assets/img/Star1.png';\nimport Preview from '../components/common/Preview';\nimport Header from '../components/common/Header';\nimport { getMovies } from '../reducks/movies/selectors';\nimport API from '../API';\n\n\nconst api = new API();\n\nconst Categories = () => {\n    const [categoryAnimated, setCategoryAnimated] = useState(null);\n    const [categoryCrime, setCategoryCrime] = useState(null);\n    const [categoryRomance, setCategoryRomance] = useState(null);\n    const [categoryAction, setCategoryAction] = useState(null);\n    const [showPreview, setShowPreview] = useState(false);\n    const [selectedMovieId, setSelectedMovieId] = useState(null);\n\n    const selector = useSelector(state => state);\n    const dispatch = useDispatch();\n    const movies = getMovies(selector);\n    const watchlist = getWatchlist(selector);\n\n    const clickfav = movie => {\n        dispatch(addWatchlist(movie));\n    };\n    const clickMovie = movieId => {\n        setSelectedMovieId(movieId);\n        setShowPreview(true);\n    };\n\n    useEffect(() => {\n        dispatch(fetchFromLocalStorage);\n        api.getMovies({ category_id: '1' })\n            .then(movies => {\n                setCategoryAnimated(movies);\n            })\n            .catch(error => {\n                alert('Failed to connect API: /movies/');\n            });\n        api.getMovies({ category_id: '2' })\n            .then(movies => {\n                setCategoryCrime(movies);\n            })\n            .catch(error => {\n                alert('Failed to connect API: /movies/');\n            });\n        api.getMovies({ category_id: '3' })\n            .then(movies => {\n                setCategoryRomance(movies);\n            })\n            .catch(error => {\n                alert('Failed to connect API: /movies/');\n            });\n        api.getMovies({ category_id: '4' })\n            .then(movies => {\n                setCategoryAction(movies);\n            })\n            .catch(error => {\n                alert('Failed to connect API: /movies/');\n            });\n    }, []);\n\n    return (\n        <>\n            {showPreview && <Preview setShowPreview={setShowPreview} selectedMovieId={selectedMovieId} />}\n\n            <Header />\n\n            <div class=\"container1\">\n\n                <div class=\"animated\">\n\n                    <h1>Animated</h1>\n                </div>\n                {categoryAnimated && categoryAnimated.results.length > 0 ? (\n                    <div class=\"animated-movies\">\n\n                        {categoryAnimated.results.map(movie => (\n\n                            <div class=\"card\">\n                                {movie &&\n                                    Object.values(watchlist).filter(\n                                        watchlistMovie => movie.id == watchlistMovie.id\n                                    ).length === 0 && (\n                                        <img\n                                            class=\"fav\"\n                                            onClick={() => {\n                                                clickfav(movie);\n                                            }}\n                                            src={IconFav}\n                                            alt=\"\"\n                                        />\n                                    )}\n                                <div class=\"img-container\">\n                                    <img onClick={() => clickMovie(movie.id)}\n                                        src={movie.image} />\n                                </div>\n                                <div class=\"info\">\n                                    <h4>{movie.name}</h4>\n                                    <p>TV-MA | Action, Crime</p>\n\n                                    <a href={movie.trailer_link} target=\"_blank\"><button class=\"trailer-Btn\">\n                                        Watch Trailer\n                                    </button></a>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                ) : (\n                    <p>No movies here yet...</p>\n                )}\n\n\n                <div class=\"crime\">\n\n                    <h1>Crime</h1>\n                </div>\n                {categoryCrime && categoryCrime.results.length > 0 ? (\n\n                    <div class=\"crime-movies\">\n\n                        {categoryCrime.results.map(movie => (\n                            <div class=\"card\">\n                                {movie &&\n                                    Object.values(watchlist).filter(\n                                        watchlistMovie => movie.id == watchlistMovie.id\n                                    ).length === 0 && (\n                                        <img\n                                            class=\"fav\"\n                                            onClick={() => {\n                                                clickfav(movie);\n                                            }}\n                                            src={IconFav}\n                                            alt=\"\"\n                                        />\n                                    )}\n                                <div class=\"img-container\">\n                                    <img onClick={() => clickMovie(movie.id)}\n                                        src={movie.image} />\n                                </div>\n                                <div class=\"info\">\n                                    <h4>{movie.name}</h4>\n                                    <p>TV-MA | Action, Crime</p>\n\n                                    <a href={movie.trailer_link} target=\"_blank\"><button class=\"trailer-Btn\">\n                                        Watch Trailer\n                                    </button></a>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                ) : (\n                    <p>No movies here yet...</p>\n                )}\n\n                <div class=\"action\">\n\n                    <h1>Action</h1>\n                </div>\n                {categoryAction && categoryAction.results.length > 0 ? (\n                    <div class=\"action-movies\">\n                        {categoryAction.results.map(movie => (\n                            <div class=\"card\">\n                                {movie &&\n                                    Object.values(watchlist).filter(\n                                        watchlistMovie => movie.id == watchlistMovie.id\n                                    ).length === 0 && (\n                                        <img\n                                            class=\"fav\"\n                                            onClick={() => {\n                                                clickfav(movie);\n                                            }}\n                                            src={IconFav}\n                                            alt=\"\"\n                                        />\n                                    )}\n                                <div class=\"img-container\">\n                                    <img onClick={() => clickMovie(movie.id)}\n                                        src={movie.image} />\n                                </div>\n                                <div class=\"info\">\n                                    <h4>{movie.name}</h4>\n                                    <p>TV-MA | Action, Crime</p>\n\n                                    <a href={movie.trailer_link} target=\"_blank\"><button class=\"trailer-Btn\">\n                                        Watch Trailer\n                                    </button></a>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                ) : (\n                    <p>No movies here yet...</p>\n                )}\n\n                <div class=\"romance\">\n\n                    <h1>Romance</h1>\n                </div>\n                {categoryRomance && categoryRomance.results.length > 0 ? (\n                    <div class=\"romance-movies\">\n                        {categoryRomance.results.map(movie => (\n                            <div class=\"card\">\n                                {movie &&\n                                    Object.values(watchlist).filter(\n                                        watchlistMovie => movie.id == watchlistMovie.id\n                                    ).length === 0 && (\n                                        <img\n                                            class=\"fav\"\n                                            onClick={() => {\n                                                clickfav(movie);\n                                            }}\n                                            src={IconFav}\n                                            alt=\"\"\n                                        />\n                                    )}\n                                <div class=\"img-container\">\n                                    <img onClick={() => clickMovie(movie.id)}\n                                        src={movie.image} />\n                                </div>\n                                <div class=\"info\">\n                                    <h4>{movie.name}</h4>\n                                    <p>TV-MA | Action, Crime</p>\n\n                                    <a href={movie.trailer_link} target=\"_blank\"><button class=\"trailer-Btn\">\n                                        Watch Trailer\n                                    </button></a>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                ) : (\n                    <p>No movies here yet...</p>\n                )}\n\n            </div>\n\n        </>\n    );\n};\n\nexport default Categories;","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/API.js",["135"],"import axios from \"axios\";\nconst MOVIE_KEY = \"MOVIE_KEY\";\nconst LOGIN_USER_KEY = \"WD_FORUM_LOGIN_USER_KEY\";\n\nvar baseURL;\nif (\n  process.env.REACT_APP_ENVIRONMENT &&\n  process.env.REACT_APP_ENVIRONMENT === \"PRODUCTION\"\n) {\n  baseURL = process.env.REACT_APP_API_BASE_URL;\n} else {\n  baseURL = \"http://127.0.0.1:8000/\";\n}\n  \n\nconst api = axios.create({\n  baseURL: baseURL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\napi.interceptors.request.use(\n  (config) => {\n    if (config.requireToken && localStorage.getItem(LOGIN_USER_KEY)) {\n      config.headers.common[\"Authorization\"] = JSON.parse(\n        localStorage.getItem(LOGIN_USER_KEY)\n      ).token;\n    }\n\n    return config;\n  },\n  (err) => {\n    console.error(err);\n  }\n);\n\nexport default class API {\n  getPosts = (params) => {\n    return api\n      .get(\"/posts/\", { params })\n      .then((response) => {\n        return response.data;\n      })\n      .catch((error) => {\n        throw new Error(error);\n      });\n  };\n  addPost = (postBody) => {\n    const formData = new FormData();\n\n    for (const key in postBody) {\n      formData.append(key, postBody[key]);\n    }\n\n    return api\n      .post(\"/posts/add/\", formData)\n      .then((response) => {\n        return response.data;\n      })\n      .catch((error) => {\n        throw new Error(error);\n      });\n  };\n  deletePost = (id) => {\n    return api.delete(`/posts/delete/${id}/`).catch((error) => {\n      throw new Error(error);\n    });\n  };\n\n  //////////////////////////////// movies ////////////////////////////////\n\n  //     getMovies = async () => {\n  //         let url = '/movies/';\n  //         const movies = await api\n  //             .get(url)\n  //             .then(response => {\n  //                 return response.data;\n  //             })\n  //             .catch(error => {\n  //                 throw new Error(error.message);\n  //             });\n  //         return movies;\n  //     };\n  // }\n\n  getMovies = async (params) => {\n    let url = \"/movies/\";\n    let query = new URLSearchParams();\n    for (const key in params) {\n      if (params[key] != null) {\n        query.append(key, params[key]);\n      }\n    }\n\n    if (query.toString() !== \"\") {\n      url += \"?\" + query.toString();\n    }\n    const places = await api\n      .get(url)\n      .then((response) => {\n        console.log(response.data);\n        return response.data;\n      })\n      .catch((error) => {\n        throw new Error(error);\n      });\n    return places;\n  };\n\n  getMovie = async (id) => {\n    const movies = await api\n      .get(\"/movies/\" + id + \"/\")\n      .then((response) => {\n        return response.data;\n      })\n      .catch((error) => {\n        throw new Error(error);\n      });\n    return movies;\n  };\n}\n","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/watchlists/selectors.js",[],"/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/watchlists/operations.js",["136","137"],"import API from '../../API';\nimport { addWatchlistAction, deleteWatchlistAction, fetchWatchlistAction } from './action';\n\nconst api = new API();\nconst WATCHLIST_KEY = 'WATCHLIST_KEY';\n\nexport const fetchFromLocalStorage = () => {\n    return async dispatch => {\n        let watchlistJSON = localStorage.getItem(WATCHLIST_KEY);\n        let watchlist = [];\n        if (watchlistJSON) {\n            watchlist = JSON.parse(watchlistJSON);\n        }\n        dispatch(fetchWatchlistAction(watchlist));\n    };\n};\n\nexport const addWatchlist = image => {\n    return async (dispatch, getState) => {\n        let prevWatchlist = getState().watchlists.list;\n        const nextWatchlist = [image, ...prevWatchlist];\n        setToLocalStorage(nextWatchlist);\n        dispatch(addWatchlistAction(nextWatchlist));\n    };\n};\n\nexport const deleteWatchlist = id => {\n    return async (dispatch, getState) => {\n        let prevWatchlist = getState().watchlists.list;\n        const nextWatchlist = prevWatchlist.filter(image => image.id != id);\n        setToLocalStorage(nextWatchlist);\n        dispatch(deleteWatchlistAction(nextWatchlist));\n    };\n};\n\nconst setToLocalStorage = watchlists => {\n    localStorage.setItem(WATCHLIST_KEY, JSON.stringify(watchlists));\n};\n","/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/movies/operations.js",[],"/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/reducks/movies/selectors.js",[],"/Users/techi.s./Desktop/CinemaParadise-main/frontend/src/components/common/Header.jsx",[],{"ruleId":"138","severity":1,"message":"139","line":4,"column":8,"nodeType":"140","messageId":"141","endLine":4,"endColumn":14},{"ruleId":"138","severity":1,"message":"142","line":12,"column":11,"nodeType":"140","messageId":"141","endLine":12,"endColumn":19},{"ruleId":"143","severity":1,"message":"144","line":22,"column":8,"nodeType":"145","endLine":22,"endColumn":10,"suggestions":"146"},{"ruleId":"147","severity":1,"message":"148","line":52,"column":29,"nodeType":"149","messageId":"150","endLine":52,"endColumn":74,"fix":"151"},{"ruleId":"152","severity":1,"message":"153","line":52,"column":37,"nodeType":"149","endLine":53,"endColumn":65},{"ruleId":"147","severity":1,"message":"148","line":59,"column":37,"nodeType":"149","messageId":"150","endLine":59,"endColumn":86,"fix":"154"},{"ruleId":"138","severity":1,"message":"155","line":2,"column":10,"nodeType":"140","messageId":"141","endLine":2,"endColumn":21},{"ruleId":"143","severity":1,"message":"156","line":52,"column":8,"nodeType":"145","endLine":52,"endColumn":16,"suggestions":"157"},{"ruleId":"147","severity":1,"message":"148","line":70,"column":51,"nodeType":"149","messageId":"150","endLine":70,"endColumn":121,"fix":"158"},{"ruleId":"152","severity":1,"message":"153","line":80,"column":25,"nodeType":"149","endLine":80,"endColumn":48},{"ruleId":"152","severity":1,"message":"153","line":81,"column":25,"nodeType":"149","endLine":81,"endColumn":49},{"ruleId":"159","severity":1,"message":"160","line":94,"column":68,"nodeType":"161","messageId":"162","endLine":94,"endColumn":70},{"ruleId":"152","severity":1,"message":"153","line":106,"column":37,"nodeType":"149","endLine":107,"endColumn":61},{"ruleId":"147","severity":1,"message":"148","line":113,"column":37,"nodeType":"149","messageId":"150","endLine":113,"endColumn":82,"fix":"163"},{"ruleId":"152","severity":1,"message":"153","line":114,"column":41,"nodeType":"149","endLine":114,"endColumn":67},{"ruleId":"152","severity":1,"message":"153","line":132,"column":25,"nodeType":"149","endLine":132,"endColumn":48},{"ruleId":"152","severity":1,"message":"153","line":133,"column":25,"nodeType":"149","endLine":133,"endColumn":49},{"ruleId":"159","severity":1,"message":"160","line":145,"column":68,"nodeType":"161","messageId":"162","endLine":145,"endColumn":70},{"ruleId":"152","severity":1,"message":"153","line":157,"column":37,"nodeType":"149","endLine":158,"endColumn":61},{"ruleId":"147","severity":1,"message":"148","line":164,"column":37,"nodeType":"149","messageId":"150","endLine":164,"endColumn":82,"fix":"164"},{"ruleId":"152","severity":1,"message":"153","line":165,"column":41,"nodeType":"149","endLine":165,"endColumn":67},{"ruleId":"138","severity":1,"message":"165","line":25,"column":11,"nodeType":"140","messageId":"141","endLine":25,"endColumn":17},{"ruleId":"143","severity":1,"message":"156","line":66,"column":8,"nodeType":"145","endLine":66,"endColumn":10,"suggestions":"166"},{"ruleId":"159","severity":1,"message":"160","line":88,"column":68,"nodeType":"161","messageId":"162","endLine":88,"endColumn":70},{"ruleId":"152","severity":1,"message":"153","line":100,"column":37,"nodeType":"149","endLine":101,"endColumn":61},{"ruleId":"147","severity":1,"message":"148","line":107,"column":37,"nodeType":"149","messageId":"150","endLine":107,"endColumn":82,"fix":"167"},{"ruleId":"159","severity":1,"message":"160","line":131,"column":68,"nodeType":"161","messageId":"162","endLine":131,"endColumn":70},{"ruleId":"152","severity":1,"message":"153","line":143,"column":37,"nodeType":"149","endLine":144,"endColumn":61},{"ruleId":"147","severity":1,"message":"148","line":150,"column":37,"nodeType":"149","messageId":"150","endLine":150,"endColumn":82,"fix":"168"},{"ruleId":"159","severity":1,"message":"160","line":171,"column":68,"nodeType":"161","messageId":"162","endLine":171,"endColumn":70},{"ruleId":"152","severity":1,"message":"153","line":183,"column":37,"nodeType":"149","endLine":184,"endColumn":61},{"ruleId":"147","severity":1,"message":"148","line":190,"column":37,"nodeType":"149","messageId":"150","endLine":190,"endColumn":82,"fix":"169"},{"ruleId":"159","severity":1,"message":"160","line":211,"column":68,"nodeType":"161","messageId":"162","endLine":211,"endColumn":70},{"ruleId":"152","severity":1,"message":"153","line":223,"column":37,"nodeType":"149","endLine":224,"endColumn":61},{"ruleId":"147","severity":1,"message":"148","line":230,"column":37,"nodeType":"149","messageId":"150","endLine":230,"endColumn":82,"fix":"170"},{"ruleId":"138","severity":1,"message":"171","line":2,"column":7,"nodeType":"140","messageId":"141","endLine":2,"endColumn":16},{"ruleId":"138","severity":1,"message":"172","line":4,"column":7,"nodeType":"140","messageId":"141","endLine":4,"endColumn":10},{"ruleId":"159","severity":1,"message":"173","line":30,"column":70,"nodeType":"161","messageId":"162","endLine":30,"endColumn":72},"no-unused-vars","'Rating' is defined but never used.","Identifier","unusedVar","'dispatch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'selectedMovieId'. Either include it or remove the dependency array.","ArrayExpression",["174"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"175","text":"176"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",{"range":"177","text":"176"},"'fetchMovies' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["178"],{"range":"179","text":"176"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"range":"180","text":"176"},{"range":"181","text":"176"},"'movies' is assigned a value but never used.",["182"],{"range":"183","text":"176"},{"range":"184","text":"176"},{"range":"185","text":"176"},{"range":"186","text":"176"},"'MOVIE_KEY' is assigned a value but never used.","'api' is assigned a value but never used.","Expected '!==' and instead saw '!='.",{"desc":"187","fix":"188"},[1810,1810]," rel=\"noreferrer\"",[2309,2309],{"desc":"189","fix":"190"},[3061,3061],[4854,4854],[7005,7005],{"desc":"191","fix":"192"},[4094,4094],[5986,5986],[7881,7881],[9782,9782],"Update the dependencies array to be: [selectedMovieId]",{"range":"193","text":"194"},"Update the dependencies array to be: [dispatch, movies]",{"range":"195","text":"196"},"Update the dependencies array to be: [dispatch]",{"range":"197","text":"198"},[644,646],"[selectedMovieId]",[2054,2062],"[dispatch, movies]",[2339,2341],"[dispatch]"]